#+EXPORT_DATE: Friday 08 May 2015 18:47:40 EEST
#+SOURCE: /Users/iani/Documents/Dev/Emacs/org-pm/org-pm.org
* Master commands
:PROPERTIES:
:ID:       8F755E3E-0D29-4B6B-A3E0-373A078E8A3E
:eval-id:  9
:PM_PROJECTS: project1
:END:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "H-e m") 'org-pm-menu)
  (global-set-key (kbd "<f14> m") 'org-pm-menu)
  (global-set-key (kbd "<f14> <f14>") 'org-pm-menu)
  (global-set-key (kbd "H-e f") 'org-pm-publish-file)
  (global-set-key (kbd "<f14> f") 'org-pm-publish-file)
  (global-set-key (kbd "H-e s") 'org-pm-publish-subtree)
  (global-set-key (kbd "<f14> s") 'org-pm-publish-subtree)

  (defun org-pm-menu ()
    "Top level menu of common org-pm commands."
    (interactive)
    (command-execute
     (intern
      (concat
       "org-pm-"
       (replace-regexp-in-string
        " " "-"
        (grizzl-completing-read
         " === SELECT ACTION: === "
         (grizzl-make-index
          (reverse '(
                     "publish file"
                     "publish subtree"
                     "dired root directory"
                     "dired source directory"
                     "dired target directory"
                     "republish entire project"
                     "open last published file"
                     "make project")))))))))

  (defun org-pm-publish-file (&optional project)
    (interactive)
    (org-pm-publish-file-or-subtree (or project (org-pm-choose-project))))

  (defun org-pm-publish-subtree (&optional project)
    (interactive)
    (org-pm-publish-file-or-subtree (or project (org-pm-choose-project t)) t))

  (defun org-pm-publish-file-or-subtree (project &optional subtree-p)
    "Publish current file or subtree to a project chosen from template folder."
    (when project
      (org-add-option-or-property
       org-pm-registered-projects-property project subtree-p)
      (org-pm-save-org-source project subtree-p)
      (org-pm-publish project nil)))

  (defun org-pm-save-org-source (project-name subtree-p)
    (save-buffer)
    (let* ((contents-buffer (current-buffer))
           (contents-path (or (buffer-file-name) (buffer-name)))
           (source-file-path (org-pm-query-source-file-path project-name subtree-p))
           (source-file-dir (file-name-directory source-file-path)))
      (if subtree-p (org-copy-subtree))
      (unless (file-exists-p source-file-dir) (mkdir source-file-dir t))
      (find-file source-file-path)
      (erase-buffer)
      (insert "#+EXPORT_DATE: "
              (format-time-string "%A %d %B %Y %T %Z\n")
              "#+SOURCE: "
              contents-path
              "\n")
      ;; If excerpting from subtree, then
      ;; subfolder must be stored in file now, to be used later
      ;; by org-export-before-parsing hook function org-pm-insert-headers
      ;; (if wnole-file, then any subdir spec will already be in place).
      (if subtree-p
          (let* ((pname
                  (org-pm-compose-project-attribute-name
                   project-name org-pm-subdir-property-name))
                 (subdir (org-entry-get (point) pname)))
            (if subdir (insert "#+" pname " " subdir "\n"))
            (org-paste-subtree 1))
        (insert-buffer-substring contents-buffer))
      (save-buffer)
      (kill-buffer)
      (setq org-pm-last-saved-source-path source-file-path)))

  (defun org-pm-choose-project (&optional subtree-p)
    "Choose a project from menu.
  - Present vertical menu with grizzl.
  - If no project exists, then create one.
  - If name of project entered is not in list of exising projects, then create
    that project.
  - Offer last chosen project for file or section in current org-mode buffer
    as default.
  - Append list already exported projects for file or section, distinguishing it
  through a separator line."
    (let* ((existing-projects
            (reverse (append '("====== Existing projects: ======") (org-pm-list-projects))))
           (default-projects
            (if (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
                (if subtree-p
                    (org-pm-get-subtree-projects)
                  (org-pm-get-file-projects))
              nil))
           (default-project-menu
             (if default-projects
                 (reverse
                  (cons
                   (format
                    "====== Projects which current %s already exports to are: ======"
                    (if subtree-p "section" "file"))
                   default-projects))
               (reverse (cons "====== Default project: ======="
                              (list (or org-pm-last-chosen-project "project1"))))))
           (chosen-project
            (replace-regexp-in-string
             "[^[:alnum:]]+"
             "-"
             (grizzl-completing-read
              "=== CHOOSE EXISTING PROJECT, OR ENTER NAME TO CREATE ONE ==="
              (grizzl-make-index
               (reverse
                (delete-dups
                 (append default-project-menu existing-projects)))))))
           (project-path (org-pm-get-project-dir chosen-project)))
      (unless (file-exists-p project-path)
        (if (y-or-n-p (format "Really create project named '%s'?" chosen-project))
            (mkdir project-path t)
          (error
           (format "Did not create project %s. Publishing cancelled."
                   chosen-project))))
      chosen-project))

  (defun org-pm-default-project-list (&optional subtree-p)
    "Present list of default projects for user to choose from.
  If current buffer is in org-mode, then list projects that this file or subtree
  has already been exported in.
  Else list the last project that has been exported to."
    (let ((exported-projects
           ))
      (if exported-projects
          exported-projects
        (if org-pm-last-chosen-project
            (list org-pm-last-chosen-project)
          nil))))

  ;; (or
  ;;  (car (memq org-pm-last-chosen-project projects))
  ;;  (car projects))



#+END_SRC
